from roboscientist.logger.logger import BaseLogger

from heapq import merge
import numpy as np
from sklearn.metrics import mean_squared_error
import pandas as pd
import os


class SingleFormulaLoggerLocal(BaseLogger):
    def __init__(self, experiment_config, dir, n_best_equations_to_store=500, evaluation_dataset_size=1000):
        super().__init__()

        self._dir = dir
        if not os.path.exists(dir):
            os.makedirs(dir)

        config_table = pd.DataFrame(experiment_config, index=[0])
        config_table.to_csv(os.path.join(self._dir, 'config.csv'))

        self._best_formulas_table = pd.DataFrame(columns=['epoch', 'rank', 'formula', 'mse'])
        self._epoch_best_formulas_table = pd.DataFrame(columns=['epoch', 'rank', 'formula', 'mse'])

        columns = [f'top_{count}' for count in [1, 10, 25, 50, 100, 250, 500]]
        self._best_log_mses_table = pd.DataFrame(columns=columns)
        self._best_mses_table = pd.DataFrame(columns=columns)
        self._epoch_log_mses_table = pd.DataFrame(columns=columns)
        self._epoch_mses_table = pd.DataFrame(columns=columns)

        self._ordered_best_formulas = []
        self._ordered_best_mses = []
        self._ordered_current_epoch_best_formulas = []
        self._ordered_current_epoch_best_mses = []

        self._n_best_equations_to_store = n_best_equations_to_store
        self._evaluation_dataset_size = evaluation_dataset_size
        self._current_epoch = 1

    def log_metrics(self, reference_problem, equations):
        """
        :param reference_problem: BaseProblem. Desired Solution.
        :param equations: list. New candidate equations generated by the model
        """
        super().log_metrics(reference_problem, equations)

        X, y_true = reference_problem.dataset

        mses = [mean_squared_error(y_true, eq.func(X)) for eq in equations]
        str_equations = [str(eq) for eq in equations]

        # sort in terms of mse
        ordered_equation_mse_pairs = sorted(zip(str_equations, mses), key=lambda x: x[1])

        # update epoch best formulas/mses
        current_epoch_ordered_equation_mse_pairs = list(merge(
            zip(self._ordered_current_epoch_best_formulas, self._ordered_current_epoch_best_mses),
            ordered_equation_mse_pairs,
            key=lambda x: x[1]))
        self._ordered_current_epoch_best_mses = [x[1] for x in current_epoch_ordered_equation_mse_pairs]
        self._ordered_current_epoch_best_formulas = [x[0] for x in current_epoch_ordered_equation_mse_pairs]

        # update best formulas/mses
        best_ordered_equation_mse_pairs = list(merge(
            zip(self._ordered_best_formulas, self._ordered_best_mses),
            ordered_equation_mse_pairs,
            key=lambda x: x[1]))[:self._n_best_equations_to_store]
        self._ordered_best_mses = [x[1] for x in best_ordered_equation_mse_pairs]
        self._ordered_best_formulas = [x[0] for x in best_ordered_equation_mse_pairs]

    def commit_metrics(self, custom_log=None):
        """
        :param custom_log: dict. Default None. Specify if some custom metrics must be logged.
        :return:
        """
        super().commit_metrics()

        wandb_log = {
            'epoch': self._current_epoch,
        }
        best_log_mses_row = {}
        best_mses_row = {}
        epoch_log_mses_row = {}
        epoch_mses_row = {}
        for count in [1, 10, 25, 50, 100, 250, 500]:
            best_mses_row[f'top_{count}'] = np.mean(self._ordered_best_mses[:count])
            epoch_mses_row[f'top_{count}'] = np.mean(self._ordered_current_epoch_best_mses[:count])
            if epoch_mses_row[f'top_{count}'] != 0:
                epoch_log_mses_row[f'top_{count}'] = np.log(epoch_mses_row[f'top_{count}'])
            else:
                epoch_log_mses_row[f'top_{count}'] = -100
            if best_mses_row[f'top_{count}'] != 0:
                best_log_mses_row[f'top_{count}'] = np.log(best_mses_row[f'top_{count}'])
            else:
                best_log_mses_row[f'top_{count}'] = -100

        self._best_log_mses_table = self._best_log_mses_table.append(
            pd.DataFrame(best_log_mses_row, index=[0]), ignore_index=True)
        self._best_mses_table = self._best_mses_table.append(
            pd.DataFrame(best_mses_row, index=[0]), ignore_index=True)
        self._epoch_log_mses_table = self._epoch_log_mses_table.append(
            pd.DataFrame(epoch_log_mses_row, index=[0]), ignore_index=True)
        self._epoch_mses_table = self._epoch_mses_table.append(
            pd.DataFrame(epoch_mses_row, index=[0]), ignore_index=True)

        n_formulas_to_show = 10
        best_formulas_row = {'epoch': [], 'rank': [], 'formula': [], 'mse': []}
        for r, (f, m) in enumerate(zip(self._ordered_best_formulas[:n_formulas_to_show],
                                       self._ordered_best_mses[:n_formulas_to_show])):
            best_formulas_row['epoch'].append(self._current_epoch)
            best_formulas_row['rank'].append(r + 1)
            best_formulas_row['formula'].append(f)
            best_formulas_row['mse'].append(m)
        self._best_formulas_table = self._best_formulas_table.append(
            pd.DataFrame(best_formulas_row), ignore_index=True)

        epoch_formulas_row = {'epoch': [], 'rank': [], 'formula': [], 'mse': []}
        for r, (f, m) in enumerate(zip(self._ordered_current_epoch_best_formulas[:n_formulas_to_show],
                                       self._ordered_current_epoch_best_mses[:n_formulas_to_show])):
            epoch_formulas_row['epoch'].append(self._current_epoch)
            epoch_formulas_row['rank'].append(r + 1)
            epoch_formulas_row['formula'].append(f)
            epoch_formulas_row['mse'].append(m)
        self._epoch_best_formulas_table = self._epoch_best_formulas_table.append(
            pd.DataFrame(epoch_formulas_row), ignore_index=True)

        self._best_log_mses_table.to_csv(os.path.join(self._dir, 'best_log_mses_table'))
        self._best_mses_table.to_csv(os.path.join(self._dir, 'best_mses_table'))
        self._epoch_log_mses_table.to_csv(os.path.join(self._dir, 'epoch_log_mses_table'))
        self._epoch_mses_table.to_csv(os.path.join(self._dir, 'epoch_mses_table'))
        self._best_formulas_table.to_csv(os.path.join(self._dir, 'best_formulas_table'))
        self._epoch_best_formulas_table.to_csv(os.path.join(self._dir, 'epoch_best_formulas_table'))

        self._current_epoch += 1

        self._ordered_current_epoch_best_formulas = []
        self._ordered_current_epoch_best_mses = []
